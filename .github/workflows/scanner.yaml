name: Subdomain & Vulnerability Scanner (Enhanced)

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to scan'
        required: true
        default: 'example.com'
      severity:
        description: 'Nuclei severity filter (comma separated, e.g. critical,high,medium)'
        required: false
        default: 'critical,high,medium'
      port_scan:
        description: 'Enable port scanning (true/false)'
        required: false
        default: 'true'
      max_urls:
        description: 'Maximum URLs to scan with Nuclei'
        required: false
        default: '1000'
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

env:
  DOMAIN: ${{ github.event.inputs.domain || 'example.com' }}
  SEVERITY: ${{ github.event.inputs.severity || 'critical,high,medium' }}
  PORT_SCAN: ${{ github.event.inputs.port_scan || 'true' }}
  MAX_URLS: ${{ github.event.inputs.max_urls || '1000' }}

jobs:
  scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install system packages & tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl unzip git gcc make masscan

          # Install Go-based tools
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          go install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
          go install -v github.com/tomnomnom/waybackurls@latest
          go install -v github.com/lc/gau/v2/cmd/gau@latest || true
          go install -v github.com/projectdiscovery/katana/cmd/katana@latest

          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "::error::DISCORD_WEBHOOK secret is not set"
            exit 1
          fi
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> $GITHUB_ENV

      - name: Create results directory
        run: mkdir -p results

      - name: Notify Start
        run: |
          curl -s -X POST -H "Content-Type: application/json" -d "$(jq -n \
            --arg c "🔍 **Scan Started**" \
            --arg d "${{ env.DOMAIN }}" \
            --arg t "${{ github.event_name }}" \
            --arg tools "subfinder, dnsx, httpx, naabu, waybackurls, gau, katana, nuclei" \
            '{content: ($c + "\n**Domain:** " + $d + "\n**Trigger:** " + $t + "\n**Tools:** " + $tools)}')" \
            "${{ env.DISCORD_WEBHOOK }}" || true

      - name: Discover subdomains
        run: |
          echo "Starting subdomain discovery for ${{ env.DOMAIN }}"
          
          # Use multiple sources for subdomain discovery
          subfinder -d "${{ env.DOMAIN }}" -all -silent -o results/subfinder.txt || true
          echo "${{ env.DOMAIN }}" | waybackurls | sed -E 's#https?://([^/]+).*#\1#' | sort -u > results/wayback_hosts.txt || true
          gau "${{ env.DOMAIN }}" 2>/dev/null | sed -E 's#https?://([^/]+).*#\1#' | sort -u > results/gau_hosts.txt || true
          
          # Use katana for additional subdomain discovery
          echo "https://${{ env.DOMAIN }}" | katana -depth 2 -jc -silent | sed -E 's#https?://([^/]+).*#\1#' | sort -u > results/katana_hosts.txt || true
          
          # Combine all sources
          cat results/subfinder.txt results/wayback_hosts.txt results/gau_hosts.txt results/katana_hosts.txt | sort -u > results/combined-subdomains.txt
          
          # Add common subdomains
          cat > results/wordlist.txt <<'WL'
          www
          dev
          staging
          test
          api
          beta
          mail
          admin
          portal
          app
          m
          mobile
          cdn
          assets
          static
          images
          blog
          shop
          secure
          WL
          for p in $(cat results/wordlist.txt); do
            echo "${p}.${{ env.DOMAIN }}"
          done >> results/combined-subdomains.txt
          
          sort -u results/combined-subdomains.txt > results/subdomains.txt
          echo "SUBDOMAINS_FOUND=$(wc -l < results/subdomains.txt)" >> $GITHUB_ENV
          echo "Found $SUBDOMAINS_FOUND subdomains"

      - name: Resolve & probe alive hosts
        run: |
          echo "Resolving subdomains and checking for alive hosts"
          
          # Resolve subdomains
          dnsx -l results/subdomains.txt -silent -a -r 1.1.1.1,8.8.8.8 -o results/resolved.txt || true
          cut -d' ' -f1 results/resolved.txt | cut -d':' -f1 | sort -u > results/resolved-hosts.txt
          
          # Check for alive hosts
          httpx -l results/resolved-hosts.txt -silent -follow-redirects -title -status-code -tech-detect -o results/alive.txt || true
          cut -d' ' -f1 results/alive.txt > results/alive-urls.txt
          
          echo "ALIVE_HOSTS=$(wc -l < results/resolved-hosts.txt)" >> $GITHUB_ENV
          echo "ALIVE_URLS=$(wc -l < results/alive-urls.txt)" >> $GITHUB_ENV
          echo "Found $ALIVE_HOSTS resolved hosts and $ALIVE_URLS alive URLs"

      - name: Port scan alive hosts (naabu)
        if: env.PORT_SCAN == 'true'
        run: |
          if [ -s results/resolved-hosts.txt ]; then
            echo "Starting port scan on alive hosts"
            naabu -list results/resolved-hosts.txt -silent -top-ports 1000 -o results/naabu-ports.txt || true
            echo "NAABU_LINES=$(wc -l < results/naabu-ports.txt)" >> $GITHUB_ENV
            echo "Found $NAABU_LINES open ports"
          else
            echo "NAABU_LINES=0" >> $GITHUB_ENV
            echo "No hosts to port scan"
          fi

      - name: Gather URLs & prepare for Nuclei
        run: |
          echo "Gathering URLs for vulnerability scanning"
          
          # Get URLs from multiple sources
          waybackurls "${{ env.DOMAIN }}" > results/wayback-urls.txt || true
          gau "${{ env.DOMAIN }}" > results/gau-urls.txt || true
          
          # Use katana for additional URL discovery
          cat results/alive-urls.txt | katana -depth 2 -jc -silent -o results/katana-urls.txt || true
          
          # Combine all URLs
          cat results/alive-urls.txt results/wayback-urls.txt results/gau-urls.txt results/katana-urls.txt | sort -u > results/candidate-urls.txt
          
          # Filter out common file extensions
          grep -viE "\.(jpg|jpeg|png|gif|svg|css|js|woff|woff2|ico|bmp|mp4|mp3|pdf|zip|tar|gz)$" results/candidate-urls.txt > results/nuclei-urls.txt
          
          # Limit the number of URLs if needed
          if [ $(wc -l < results/nuclei-urls.txt) -gt ${{ env.MAX_URLS }} ]; then
            shuf -n ${{ env.MAX_URLS }} results/nuclei-urls.txt > results/nuclei-urls-limited.txt
            mv results/nuclei-urls-limited.txt results/nuclei-urls.txt
          fi
          
          echo "NUCLEI_URLS=$(wc -l < results/nuclei-urls.txt)" >> $GITHUB_ENV
          echo "Prepared $NUCLEI_URLS URLs for vulnerability scanning"

      - name: Update Nuclei templates
        run: nuclei -update-templates || true

      - name: Run Nuclei on URLs
        run: |
          if [ -s results/nuclei-urls.txt ]; then
            echo "Running Nuclei on URLs"
            nuclei -l results/nuclei-urls.txt -severity "${{ env.SEVERITY }}" -t ~/nuclei-templates -o results/nuclei-urls-results.txt -silent || true
          else
            touch results/nuclei-urls-results.txt
          fi

      - name: Run Nuclei on hosts
        run: |
          if [ -s results/resolved-hosts.txt ]; then
            echo "Running Nuclei on hosts"
            nuclei -l results/resolved-hosts.txt -severity "${{ env.SEVERITY }}" -t ~/nuclei-templates -o results/nuclei-hosts-results.txt -silent || true
          else
            touch results/nuclei-hosts-results.txt
          fi

      - name: Process Nuclei results
        run: |
          # Combine results and remove duplicates
          cat results/nuclei-urls-results.txt results/nuclei-hosts-results.txt | sed '/^$/d' | sort -u > results/nuclei-results.txt
          echo "VULNS_FOUND=$(wc -l < results/nuclei-results.txt || echo 0)" >> $GITHUB_ENV
          echo "Found $VULNS_FOUND vulnerabilities"
          
          # Create a summary of vulnerabilities by type
          if [ "${{ env.VULNS_FOUND }}" -gt 0 ]; then
            grep -o '\[.*\]' results/nuclei-results.txt | sort | uniq -c | sort -nr > results/vuln-summary.txt
          fi

      - name: Notify Nuclei Summary
        run: |
          if [ "${{ env.VULNS_FOUND }}" -gt 0 ]; then
            curl -s -X POST -H "Content-Type: application/json" -d "$(jq -n \
              --arg d "${{ env.DOMAIN }}" \
              --arg v "${{ env.VULNS_FOUND }}" \
              --arg s "${{ env.SEVERITY }}" \
              '{content: ("🚨 **Vulnerabilities Found!**\n**Domain:** " + $d + "\n**Severity Filter:** " + $s + "\n**Count:** " + $v)}')" \
              "${{ env.DISCORD_WEBHOOK }}" || true
          else
            curl -s -X POST -H "Content-Type: application/json" -d "$(jq -n \
              --arg d "${{ env.DOMAIN }}" \
              --arg s "${{ env.SEVERITY }}" \
              '{content: ("✅ **Nuclei Complete**\n**Domain:** " + $d + "\n**Severity Filter:** " + $s + "\nNo vulnerabilities found.")}')" \
              "${{ env.DISCORD_WEBHOOK }}" || true
          fi

      - name: Send vulnerability summary
        if: env.VULNS_FOUND > 0
        run: |
          if [ -s results/vuln-summary.txt ]; then
            SUMMARY=$(cat results/vuln-summary.txt | head -10 | awk '{print $2 " - " $1 " occurrences"}' | paste -sd '\n' -)
            curl -s -X POST -H "Content-Type: application/json" -d "$(jq -n \
              --arg d "${{ env.DOMAIN }}" \
              --arg s "$SUMMARY" \
              '{content: ("📊 **Vulnerability Summary for " + $d + "**\n```\n" + $s + "\n```")}' \
              "${{ env.DISCORD_WEBHOOK }}" || true
          fi

      - name: Send individual vulnerabilities (max 20)
        if: env.VULNS_FOUND > 0
        run: |
          MAX_MSG=20
          COUNT=0
          while IFS= read -r vuln; do
            [ "$COUNT" -ge "$MAX_MSG" ] && break
            # Extract key information from the vulnerability
            URL=$(echo "$vuln" | grep -oE 'https?://[^[:space:]]+' | head -1)
            VULN_TYPE=$(echo "$vuln" | grep -oE '\[[^]]+\]' | head -1)
            SEVERITY=$(echo "$vuln" | grep -oE '\[.*\]' | tail -1)
            
            MSG="🚨 **Vulnerability Found**\n**Domain:** ${{ env.DOMAIN }}\n**URL:** $URL\n**Type:** $VULN_TYPE\n**Severity:** $SEVERITY\n\`\`\`\n$vuln\n\`\`\`"
            curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"content\": $(echo "$MSG" | jq -Rs .)}" \
              "${{ env.DISCORD_WEBHOOK }}" || true
            COUNT=$((COUNT+1))
            sleep 1
          done < results/nuclei-results.txt

      - name: Create scan report
        run: |
          cat > results/scan-report.md <<EOF
          # Scan Report for ${{ env.DOMAIN }}
          
          ## Scan Summary
          - **Domain:** ${{ env.DOMAIN }}
          - **Severity Filter:** ${{ env.SEVERITY }}
          - **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Results
          - **Subdomains Found:** ${{ env.SUBDOMAINS_FOUND }}
          - **Alive Hosts:** ${{ env.ALIVE_HOSTS }}
          - **Alive URLs:** ${{ env.ALIVE_URLS }}
          - **Open Ports:** ${{ env.NAABU_LINES }}
          - **URLs Scanned:** ${{ env.NUCLEI_URLS }}
          - **Vulnerabilities Found:** ${{ env.VULNS_FOUND }}
          
          ## Vulnerabilities
          EOF
          
          if [ "${{ env.VULNS_FOUND }}" -gt 0 ]; then
            cat results/nuclei-results.txt >> results/scan-report.md
          else
            echo "No vulnerabilities found." >> results/scan-report.md
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ env.DOMAIN }}-$(date +%Y%m%d-%H%M%S)
          path: results/
          retention-days: 30

      - name: Final notification
        run: |
          curl -s -X POST -H "Content-Type: application/json" -d "$(jq -n \
            --arg d "${{ env.DOMAIN }}" \
            --arg s "${{ env.SEVERITY }}" \
            --arg sub "$(wc -l < results/subdomains.txt || echo 0)" \
            --arg alive "$(wc -l < results/alive-urls.txt || echo 0)" \
            --arg v "$(wc -l < results/nuclei-results.txt || echo 0)" \
            --arg ports "$(wc -l < results/naabu-ports.txt || echo 0)" \
            --arg urls "$(wc -l < results/nuclei-urls.txt || echo 0)" \
            '{content: ("✅ **Scan Finished**\n**Domain:** " + $d + "\n**Severity:** " + $s + "\n**Subdomains:** " + $sub + "\n**Alive URLs:** " + $alive + "\n**Open Ports:** " + $ports + "\n**URLs Scanned:** " + $urls + "\n**Vulnerabilities:** " + $v)}')" \
            "${{ env.DISCORD_WEBHOOK }}" || true
            --arg v "$(wc -l < nuclei-results.txt || echo 0)" \
            '{content: ("✅ **Scan Finished**\n**Domain:** " + $d + "\n**Severity:** " + $s + "\n**Subdomains:** " + $sub + "\n**Alive URLs:** " + $alive + "\n**Vulnerabilities:** " + $v)}')" \
            "${{ env.DISCORD_WEBHOOK }}" || true
